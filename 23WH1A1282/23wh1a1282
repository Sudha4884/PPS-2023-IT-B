1) Write a C program to determine if the given string is a palindrome or not (Spelled same in both directions with or without a meaning like madam, civic ,noon, abcba, etc.)
#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to check if a string is a palindrome
int isPalindrome(char str[]) {
    int left = 0;
    int right = strlen(str) - 1;

    while (left < right) {
        // Ignore non-alphabetic characters
        while (!isalpha(str[left]) && left < right) {
            left++;
        }
        while (!isalpha(str[right]) && left < right) {
            right--;
        }

        // Convert characters to lowercase for comparison
        if (tolower(str[left]) != tolower(str[right])) {
            return 0; // Not a palindrome
        }

        left++;
        right--;
    }

    return 1; // Palindrome
}

int main() {
    char inputString[100];

    printf("Enter a string: ");
    scanf("%s", inputString);

    if (isPalindrome(inputString)) {
        printf("The string '%s' is a palindrome.\n", inputString);
    } else {
        printf("The string '%s' is not a palindrome.\n", inputString);
    }
    return 0;
}
          

2) Write a C program that displays the position of a character ch in the strings or –1 if S doesn’t                   contain ch.
	 #include <stdio.h>
// Function to find the position of a character in a string
int findCharacterPosition(const char *S, char ch) {
    int position = -1; // Initialize position to -1, indicating character not found

    for (int i = 0; S[i] != '\0'; i++) {
        if (S[i] == ch) {
            position = i; // Set position to current index
            break;
        }
    }

    return position;
}

int main() {
    char inputString[100];
    char character;
    int position;

    printf("Enter a string: ");
    scanf("%s", inputString);

    printf("Enter a character to find: ");
    scanf(" %c", &character);

    position = findCharacterPosition(inputString, character);

    if (position != -1) {
        printf("The character '%c' is found at position: %d\n", character, position);
    } else {
        printf("The character '%c' is not found in the string.\n", character);
    }

    return 0;
}
          

3) f.Write a C program to count the lines,words and characters in a given text.
#include <stdio.h>
#include <ctype.h>
#define IN 1
#define OUT 0
// Function to count lines, words, and characters in a given text
void countLinesWordsChars(FILE *file) {
    int lines = 0, words = 0, characters = 0;
    int state = OUT;
    char ch;
    while ((ch = fgetc(file)) != EOF) {
        characters++;
        // Count lines
        if (ch == '\n') {
            lines++;
       }
        // Count words
        if (isspace(ch)) {
            state = OUT;
        } else if (state == OUT) {
            state = IN;
            words++;
        }
    }
    // Increment lines if the last line does not end with a newline
    if (characters > 0 && ch != '\n') {
        lines++;
    }
    printf("Lines: %d\n", lines);
    printf("Words: %d\n", words);
    printf("Characters: %d\n", characters);
}
int main() {
    FILE *file;
    char filename[100];
    printf("Enter the filename: ");
    scanf("%s", filename);
    file = fopen(filename, "r");
    if (file == NULL) {
        printf("Unable to open the file.\n");
        return 1;
    }
    countLinesWordsChars(file);
    fclose(file);
    return 0;
}


4)Write a menu driven C program that allows a user to enter n numbers and then choose between finding the smallest, largest, sum, or average. The menu and all the choices are to be functions. Use a switch statement to determine what action to take. Display an error message if an invalid choice is entered
 #include <stdio.h>
void displayMenu() {
    printf("Menu:\n");
    printf("1. Find the smallest number\n");
    printf("2. Find the largest number\n");
    printf("3. Calculate the sum of numbers\n");
    printf("4. Calculate the average of numbers\n");
    printf("Enter your choice: ");
}

float findSmallest(float numbers[], int n) {
    float smallest = numbers[0];
    for (int i = 1; i < n; ++i) {
        if (numbers[i] < smallest) {
            smallest = numbers[i];
        }
    }
    return smallest;
}

float findLargest(float numbers[], int n) {
    float largest = numbers[0];
    for (int i = 1; i < n; ++i) {
        if (numbers[i] > largest) {
            largest = numbers[i];
        }
    }
    return largest;
}

float calculateSum(float numbers[], int n) {
    float sum = 0.0;
    for (int i = 0; i < n; ++i) {
        sum += numbers[i];
    }
    return sum;
}

float calculateAverage(float numbers[], int n) {
    float sum = calculateSum(numbers, n);
    return sum / n;
}

int main() {
    int n, choice;
    printf("Enter the number of elements: ");

    scanf("%d", &n);

    float numbers[n];
    printf("Enter %d numbers:\n", n);
    for (int i = 0; i < n; ++i) {
        scanf("%f", &numbers[i]);
    }

    displayMenu();
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            printf("Smallest number: %.2f\n", findSmallest(numbers, n));
            break;
        case 2:
            printf("Largest number: %.2f\n", findLargest(numbers, n));
            break;
        case 3:
            printf("Sum of numbers: %.2f\n", calculateSum(numbers, n));
            break;
        case 4:
            printf("Average of numbers: %.2f\n", calculateAverage(numbers, n));
            break;
        default:
            printf("Error: Invalid choice\n");
    }

    return 0;
}

	
5) Write a C program to construct a pyramid of numbers as follows:
1	*	1	1	*
12	* *	23	22	* *
123	* **	456	333	* **
4 4 44	* *
          *
#include <stdio.h>

int main() {
    int rows, num = 1, asterisks = 1;

    printf("Enter the number of rows: ");
    scanf("%d", &rows);

    printf("Pyramid of Numbers:\n");
    for (int i = 1; i <= rows; ++i) {
        // Print numbers in ascending order
        for (int j = 1; j <= num; ++j) {
            printf("%d", j);
        }

        // Print asterisks
        for (int j = 1; j <= asterisks; ++j) {
            printf("*");
        }

        // Print numbers in descending order
        for (int j = num; j >= 1; --j) {
            if (j != 1) {
                printf("%d", j);
            }
        }

        printf("\n");

        // Update values for the next row
        num++;
        asterisks += 2;
    }

    return 0;
}
           

6)Write a C program that uses non recursive function to search for a Key value in a given list of integers using linear search method.
	Source Code:
#include <stdio.h>
int linearSearch(int arr[], int size, int key) {
    for (int i = 0; i < size; ++i) {
        if (arr[i] == key) {
            return i; // Return the index where key is found
        }
    }
    return -1; // Return -1 if key is not found
}
int main() {
    int n, key;
    printf("Enter the number of elements in the list: ");
    scanf("%d", &n);
    int numbers[n];
    printf("Enter %d integers:\n", n);
    for (int i = 0; i < n; ++i) {
        scanf("%d", &numbers[i]);
    }
    printf("Enter the key to search for: ");
    scanf("%d", &key);
    int result = linearSearch(numbers, n, key);
    if (result != -1) {
        printf("Element found at index: %d\n", result);
    } else {
        printf("Element not found in the list\n");
    }
    return 0;
}


7) Write a C program that implements the Bubble sort method to sort a given list of integers in ascending order.
#include <stdio.h>

void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap arr[j] and arr[j+1]
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

    int int main() {
arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("Unsorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    bubbleSort(arr, n);

    printf("Sorted array in ascending order: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
	

8) Write a C program that sorts the given array of integers using selection sort in descending order 
#include <stdio.h>

void selectionSort(int arr[], int n) {
    int i, j, max_idx, temp;
    for (i = 0; i < n - 1; i++) {
        max_idx = i;
        for (j = i + 1; j < n; j++) {
            if (arr[j] > arr[max_idx]) {
                max_idx = j;
            }
        }
        // Swap the found maximum element with the first element
        temp = arr[max_idx];
        arr[max_idx] = arr[i];
        arr[i] = temp;
    }
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("Unsorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    selectionSort(arr, n);

    printf("Sorted array in descending order: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
            
	

9) Write a C program that sorts
	#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_NAMES 10
#define MAX_NAME_LENGTH 50

// Comparison function for qsort to sort strings
int compareStrings(const void *a, const void *b) {
    return strcmp(*(const char **)a, *(const char **)b);
}

int main() {
    char names[MAX_NAMES][MAX_NAME_LENGTH] = {
        "Alice", "Charlie", "Bob", "Eve", "David", 
        "Frank", "Grace", "Heidi", "Ivy", "Jack"
    };

    printf("Unsorted names:\n");
    for (int i = 0; i < MAX_NAMES; i++) {
        printf("%s\n", names[i]);
    }

    // Sort the names using qsort
    qsort(names, MAX_NAMES, sizeof(names[0]), compareStrings);

    printf("\nSorted names:\n");
    for (int i = 0; i < MAX_NAMES; i++) {
        printf("%s\n", names[i]);
    }

    return 0;
}
            Output:


10) Given an integer n, for every integer i <= n, the task is to print “FizzBuzz” if i is divisible by 3 and 5, “Fizz” if i is divisible by 3, “Buzz” if i is divisible by 5 or i (as a string) if none of the conditions are true.
	#include <stdio.h>
void fizzBuzz(int n) {
    for (int i = 1; i <= n; i++) {
        if (i % 3 == 0 && i % 5 == 0) {
            printf("FizzBuzz\n");
        } else if (i % 3 == 0) {
            printf("Fizz\n");
        } else if (i % 5 == 0) {
            printf("Buzz\n");
        } else {
            printf("%d\n", i);
        }
    }
}
int main() {
    int n = 20; // Change this value to set the range
    fizzBuzz(n);
    return 0;
}
          





