# -*- coding: utf-8 -*-
"""pplab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p_3YTn6Mor4qJ9_U84fY3ZO1v7sFFdEs
"""

def degreeradians(radians):
    degrees = radians*(180/3.14)
    return degrees
input_degree = int(input())
degreeradians(input_degree)

def sorting_a_listasc(input_list):
    n = len(input_list)
    for i in range(n):
        for j in range(0, n-i-1):
            if input_list[j] > input_list[j+1]:
                input_list[j], input_list[j+1] = input_list[j+1], input_list[j]
    return input_list

def sorting_a_listdes(input_list):
    n = len(input_list)
    for i in range(n):
        for j in range(0, n-i-1):
            if input_list[j] < input_list[j+1]:
                input_list[j], input_list[j+1] = input_list[j+1], input_list[j]
    return input_list

input_list = [6, 4, 6, 8, 3, 2]
ip = input()
if ip == 'asc':
    sorted_list = sorting_a_listasc(input_list)
elif ip == 'des':
    sorted_list = sorting_a_listdes(input_list)
else:
    print('none')

print("Sorted list:", sorted_list)

def decimaltobinary(num):
    if num >= 1:
        decimaltobinary(num // 2)
    print(num % 2, end = '')
number = int(input())
decimaltobinary(number)

def vowels(string):
    count = 0
    for char in string:
        if char=='a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':
            count += 1
    return count
input_string = input()
print("Number of vowels:",vowels(input_string))

card = input()
for i in range(0,len(card)-4):
    print('*',end = "")
for i in range(len(card)-1,len(card)-5,-1):
    print(card[i],end = "")

def count(string):
    countx = 0
    counto = 0
    for char in string:
        if char == 'x' or char == 'X':
            countx += 1
        if char == 'o' or char == 'O':
            counto += 1
    if countx == counto:
        return True
    else:
        return False
input_string = input()
count(input_string)

def calculator():
    num_1 = int(input())
    num_2 = int(input())
    operator = input()
    if operator == '+':
        result = num_1+num_2
    elif operator == '-':
        result = num_1-num_2
    elif operator == '*':
        result = num_1*num_2
    if operator == '//':
        result = num_1 // num_2
    if operator == '%':
        result = num_1 % num_2
    if operator == '**':
        result = num_1 ** num_2
    print(result)
calculator()

def discount(price,perdiscount):
    discountprice = (perdiscount/100)*price
    finalprice = price - discountprice
    return finalprice
price = int(input())
percentage = int(input())
print(discount(price,percentage))

list1 = input().split()
list2 = []
for i in list1:
    if i.isnumeric():
        list2.append(i)
print(list2)

input_string = input()
for char in input_string:
    print(char+char,end="")

from itertools import permutations
def permutation(input_string):
    p = permutations(input_string)
    for word in p:
        print(''.join(word))
permutation("dog")

from scipy.spatial import distance
p1 = (4,5,6)
p2 = (7,8,9)
distance = distance.euclidean(p1,p2)
print(distance)
#import numpy as np
#p1 = np.array((1,2,3))
#p2 = np.array((1,2,3))
#dist = np.linalg.norm(p1-p2)
#print(dist)

def is_prime(num: int) -> bool:
    count = 0
    for i in range(1,num+1):
        if num % i == 0:
            count += 1
    if count == 2:
        return True
    else:
        return False
def prime_fibonacci():
    first,second = 0,1
    for i in range (1,25):
        if i == 0 or i == 1:
            next = i
        else:
            next = first + second
            first = second
            second = next
        if is_prime(next) and next <50:
            print(next)
prime_fibonacci()

gp,argument passing