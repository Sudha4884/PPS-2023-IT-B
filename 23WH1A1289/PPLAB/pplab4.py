# -*- coding: utf-8 -*-
"""pplab4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1muTZNLfBy9RUmGwlHUSvRopRcyZVdGbR
"""

import numpy as np
def multiplication_arrays(array1,array2,r,c,r1,c1):
    result = []
    for i in range(r):
        a= []
        for j in range(c1):
            a.append(0)
        result.append(a)
    for i in range(r):
        for j in range(c1):
            for k in range(r):
                result[i][j] += array1[i][k]*array2[k][j]
    result = np.array(result)
    return result

r = int(input('enter number of rows'))
c = int(input('enter number of cols'))
r1 = int(input('enter number of rows'))
c1 = int(input('enter number of cols'))


def read_array(r,c):
    arr = []
    for i in range(r):
        a = []
        for j in range(c):
            a.append(int(input()))
        arr.append(a)
    return np.array(arr)
array1 = read_array(r,c)
array2 = read_array(r1,c1)
multiplication_arrays(array1,array2,r,c,r1,c1)

import numpy as np
coeff = [int(i) for i in input().split()]
matrix1 = np.array(coeff)
matrix1 = matrix1.reshape(2,2)
print(matrix1)
const = [int(i) for i in input().split()]
matrix2 = np.array(const)
matrix2.reshape(2,1)
coeffinv = np.linalg.inv(matrix1)
result = np.matmul(coeffinv,const)
print(result)

exp = input()
res = ""
for symbol in exp:
    if symbol.isnumeric():
        num = symbol
    elif symbol == '(' or symbol == ')':
        pass
    elif symbol.isalpha():
        res = res + num + '*' + symbol
    else:
        res += symbol
print(res)

def sorting(num:list) -> bool:
    return sorted(num) == num
list1 = [int(i) for i in input().split()]
sorting(list1)

import numpy as np
def is_sorted(num: list) -> bool:
    array = np.array(num)
    return all(np.sort(array) == array)
num = [int(i) for i in input().split()]
is_sorted(num)

import numpy as np
def is_sorted(num: list) -> bool:
    print(np.diff(num))
    return all(np.diff(num))
is_sorted([1, 2, 3, 4, 5])

def is_ascending(num: list) -> bool:
    return all(a <= b for a,b in zip(num,num[1:]))
is_ascending([1, 2, 3, 4, 5])

def duplicates():
    list1 = [i for i in input().split()]
    for i in range(len(list1)):
        for j in range(i+1,len(list1)):
            return list1[i] == list1[j]
duplicates()

def duplicates(string: str) -> bool:
    new_dict = {}
    for word in list(string):
        if word in new_dict:
            new_dict[word] += 1
        else:
            new_dict[word] = 1
    return all([values == 1 for values in new_dict.values()])
dictionary = {'america':'american english','Britain':'english','Germany':'german'}
duplicates(dictionary)

def duplicates(list1: list) -> bool:
    return len(set(list1)) == len(list1)
def remove_duplicates(list1: list) -> list:
    return set(list1)
list1 = [i for i in input().split()]
print(duplicates(list1))
unique = list(remove_duplicates(list1))
print(unique)



def key_to_value(dictionary :dict) -> dict:
    new_dict = {}
    for keys,values in dictionary.items():
        new_dict[values] = keys
    return new_dict

dictionary = {'america':'american english','Britain':'english','Germany':'german'}
print(key_to_value(dictionary))

dictionary = {'america':'american english','Britain':'english','Germany':'german'}
new_dict = dict([(value,key) for key,value in dictionary.items()])
print(new_dict)

def split_string(string: str) -> str:
    return  ','.join(list(string))
split_string('apple')

string = input().split()
word = input()
new_word = ''
for char in string:
    if word != char:
        new_word += char+' '
print(new_word)

string = input().split()
new_string = ''
for word in string:
    new_word = word.replace(word[0],word[0].upper())
    new_string += new_word +' '
print("".join(new_string))